"use client";

import {
  Box,
  Button,

  Group,
  LoadingOverlay,

  TextInput,
} from "@mantine/core";
import { isNotEmpty,  useForm } from "@mantine/form";
import { IconCheck, IconX } from "@tabler/icons-react";
import { modals } from "@mantine/modals";
import { useDisclosure } from "@mantine/hooks";
import { createUser } from "../../../api/apicreateUserProjectRole"; // üîÅ s·ª≠a ƒë∆∞·ªùng d·∫´n n·∫øu c·∫ßn


interface CreateViewProps {
  onSearch: () => Promise<void>;
}

const CreateView = ({ onSearch }: CreateViewProps) => {
  const [visible, { open, close }] = useDisclosure(false);

  const form = useForm({
    initialValues: {
   user_id: "",
   project_id: "",
   system_id: "",
   role_id: "",   
    },
    validate: {
      user_id: isNotEmpty("M√£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
      project_id: isNotEmpty("M√£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
      system_id: isNotEmpty("M√£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
      role_id: isNotEmpty("M√£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
     
     
    },
  });

const handleSubmit = async (values: typeof form.values) => {
  open();
  try {
    const userData = {
      user_id: values.user_id,
      project_id: values.project_id,
      system_id: values.system_id,
      role_id: values.role_id,
    };

    // üü¢ Truy·ªÅn ƒë·ªß 2 tham s·ªë
    await createUser(values.project_id, userData);

    await onSearch();
    modals.closeAll();
  } catch (error) {
    console.error("L·ªói khi t·∫°o user:", error);
    alert("ƒê√£ x·∫£y ra l·ªói khi t·∫°o ng∆∞·ªùi d√πng.");
  } finally {
    close();
  }
};

  return (
    <Box
      component="form"
      miw={320}
      mx="auto"
      onSubmit={form.onSubmit(handleSubmit)}
    >
      <LoadingOverlay
        visible={visible}
        zIndex={1000}
        overlayProps={{ radius: "sm", blur: 2 }}
      />
<TextInput
  label="Ng∆∞·ªùi d√πng"
  placeholder="Nh·∫≠p ng∆∞·ªùi d√πng"

  withAsterisk
  mt="md"
  {...form.getInputProps("user_id")}
/>
      <TextInput
    label="D·ª± √°n"
    placeholder="Nh·∫≠p T√™n d·ª± √°n"
    withAsterisk
    mt="md"
    {...form.getInputProps("project_id")}
  />

  <TextInput
    label=" H·ªá th·ªëng"
    placeholder="Nh·∫≠p h·ªá th·ªëng"
    withAsterisk
    mt="md"
    {...form.getInputProps("system_id")}
  />

  <TextInput
    label="T√™n vai tr√≤"
    placeholder="Nh·∫≠p t√™n vai tr√≤"
    withAsterisk
    mt="md"
    {...form.getInputProps("role_id")}
  />


   
  

      <Group justify="flex-end" mt="lg">
        <Button
          type="submit"
          color="#3598dc"
          loading={visible}
          leftSection={<IconCheck size={18} />}
        >
          L∆∞u
        </Button>
        <Button
          variant="outline"
          color="black"
          type="button"
          loading={visible}
          onClick={() => modals.closeAll()}
          leftSection={<IconX size={18} />}
        >
          ƒê√≥ng
        </Button>
      </Group>
    </Box>
  );
};

export default CreateView;
